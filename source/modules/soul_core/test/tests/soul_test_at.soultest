## error 5:14: error: The 'at' method expects one argument

bool test()
{
    float[100] f;
    return f.at (1,2) == 0.0f;
}

## error 5:14: error: The 'at' method can only be applied to a vector or array

bool test()
{
    float f;
    return f.at (1) == 0.0f;
}

## error 9:29: error: The 'at' method can only be applied to a vector or array

processor test
{
    input stream float audioIn;
    output stream float audioOut;

    void run()
    {
        audioOut << audioIn.at(2);
        advance();
    }
}

## error 9:31: error: The 'at' method can only be applied to a vector or array

processor test
{
    input stream float audioIn;
    output stream float audioOut;

    void run()
    {
        (audioOut << audioIn).at(2);
        advance();
    }
}

## error 2:30: error: Type references are not allowed in this context

void foo() { int[2] a; a.at (int) = 1; }

## function

bool test1()
{
    int32 i = 1;
    ++i; ++i; ++i; ++i; ++i;
    int[2] c;
    c.at(i) = 1;
    return c.at(i) == 1;
}

bool test2()
{
    int64 i = 1;
    ++i; ++i; ++i; ++i; ++i;
    int[2] c;
    c.at(i) = 1;
    return c.at(i) == 1;
}

bool testFunc1()
{
    int<5>[10] f;

    f.at(5).at(3) = 1;
    f.at(6).at(2) = 2;
    f.at(7).at(1) = 3;
    f.at(8).at(0) = 4;

    return f.at(5).at(3)== 1 &&
           f[6].at(2) == 2 &&
           f.at(7)[1] == 3 &&
           f[8][0] == 4;
}

bool testFunc2()
{
    int<5>[10] f;

    f.at(5).at(3) = 1;
    f.at(6)[2]    = 2;
    f[7].at(1)    = 3;
    f[8][0]       = 4;

    return f.at(5).at(3)== 1 &&
           f[6].at(2) == 2 &&
           f.at(7)[1] == 3 &&
           f[8][0] == 4;
}
